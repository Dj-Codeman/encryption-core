# General directories
datadir="/mnt/Backups"
jsondir="/code/encryption/indexs"
keydir="/code/encryption/keys"
systemkey="/code/encryption/keys/systemkey.dk"


# Key generation
function generate_keys {
echo "Deleting orphaned files & indexes"
rm -rf "$datadir/"
rm -rf "$jsondir/"
rm -rf "$keydir/"
mkdir -pv "$datadir"
mkdir -pv "$keydir"
mkdir -pv "$jsondir"

# min max key generation settings
key=100
k=1

# Creating primary system key
encrypt -g > "$systemkey"
# Adding system key to json
echo "[\"0\",\"$systemkey\",\"NULL\" ]" |
jq -r '{ "number":.[0], "location":.[1], "parent":.[2] }' > "$jsondir/master.json"

#generating random key and json file assosiations
for i in $(seq $key); do
# Setting key count int
# Generating keys
    encrypt -g > "$keydir/$k.dk"
# JSON format    KEY_NUMBER KEY_LOCATION KEY_DEPENDENCIES
# KEY_DEPENDENCIES if a key is to be modified baseded on the present of another file or key
# That file or key is listed as the parent
    echo "[\"$k\",\"$keydir/$k.dk\",\"systemkey.dk\" ]" |
    jq -r '{ "number":.[0], "location":.[1], "parent":.[2] }' > "$jsondir/$k.json"
#adding to k

k=$((k+1))
done

unset k
unset key
unset systemkey
}

# key fetch function
function fetch_key {
number="$1"
if [ "$number" == "systemkey" ]; then
  key="$(cat "$jsondir/master.json" | jq ' .location' | sed 's/"//g')"
  echo "$key"
else
  key="$(cat "$jsondir/$number.json" | jq ' .location' | sed 's/"//g')"
  echo "$key"
fi
}




# Key verification
## Insuring systemkey.dk is present
function check_keys {
  if [ -f "$(fetch_key "systemkey")" ]; then
    echo "Key exists"
    # add test for systemkey
  else
    echo "System re-initializing"
    generate_keys
    # refactor for individual json files instead of master index
    echo "System was re-initialized please try again"
    exit 101
  fi
}

#collision function

#.....
# damn this a whole lot of code






# Writing function
function write {

# positionals for write funtion
# 1. path to the file
# 2 class for the json file
# 3 shortname

#creating uid and selecting keys
key="$(shuf -i 1-100 -n 1)"
uid="$( fetch_key $key | sed 's/[ -]//g' | base64 | head -c 10; )"
#path specified by positional argument

class=$2
datapath=$1

if [[ -z $class ]]; then
  echo "invalid class given try again"
  exit 100
fi

  input="$datadir/$shortname-$class.dec"
  dir="$(realpath "$datapath")"
  mv -v "$(realpath "$datapath")" "$input"
    if [ -f "$input" ]; then
      echo "File move successful indexing"
      #output="$( echo $input | sed 's/.dec//g' )"
      # some stupid file abstraction
      name="$( echo $shortname-$class | base64 )"
      output="$datadir/$name"
	encrypt -e -i "$input" -o "$output" -k "$( cat "$(fetch_key $key)" )"
        if [ -f "$output" ]; then
          echo -e "\nFile Successfully encrypted"
          # removing plaintext file
          rm -v "$input"
          # shortname_test
          #json base file variable
          jsonbase="$jsondir/$shortname-$class"
          ## If shortname already exists call a flush ... whatever that will be
          echo "[\"$shortname\",\"$class\",\"$key\",\"$uid\",\"$output\",\"$dir\"]" \
          | jq -r '{ "name":.[0], "class":.[1], "key":.[2], "uid":.[3], "path":.[4], "dir":.[5] }' \
          > "$jsonbase.jn"
          encrypt -e -i "$jsonbase.jn" -o "$jsonbase.json" -k "$( cat "$(fetch_key "systemkey")" )"
          if [ -f "$jsonbase.json" ]; then
            echo "index created succefully"
            rm "$jsonbase.jn"
	    unset $uid
            unset $key
          else
            clear
            echo "An error occoured creating index"
            exit 102
          fi
        else
          echo "An error occoured when encrypting file."
        fi
    else
      echo "File was not copyed check freespace and try again"
      exit 102
    fi
}



# alias enc="bash /mnt/Scripts/FLR/index/files/encrypt.sh"
